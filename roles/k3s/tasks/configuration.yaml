---
- name: Node Configuration
  block:
    - name: Set sysctl parameters
      ansible.builtin.copy:
        content: |
          {% for key, value in k3s_map.node.sysctl_parameters.items() %}
          {{ key }} = {{ value }}
          {% endfor %}
        dest: /etc/sysctl.d/90-kubernetes-node.conf
        owner: root
        group: root
        mode: '644'
      notify: Reload sysctl parameters

    - name: Create registries file
      ansible.builtin.template:
        src: registries.j2
        dest: '{{ k3s_project.cluster.registries }}'
        owner: root
        group: root
        mode: '600'

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Server Configuration
  when: inventory_hostname in k3s_map.server.hosts
  block:
    - name: Add variable to environment file
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: KUBECONFIG={{ k3s_project.cluster.kubeconfig }}
        regexp: ^KUBECONFIG

    - name: Create symlinks
      ansible.builtin.file:
        path: '{{ k3s_map.node.directory.bin }}/{{ item }}'
        src: '{{ k3s_project.node.binary }}'
        state: link
      loop:
        - crictl
        - ctr
        - kubectl

    - name: Create log directory
      ansible.builtin.file:
        path: '{{ k3s_map.node.directory.log }}'
        state: directory
        owner: root
        group: root
        mode: '755'

    - name: Install monitor tool
      ansible.builtin.template:
        src: monitor.j2
        dest: '{{ k3s_map.node.directory.bin }}/k3s-monitor'
        owner: root
        group: root
        mode: '755'

    - name: Validate service state
      ansible.builtin.wait_for:
        port: '{{ k3s_vars.server.api.port }}'
        timeout: 30
      any_errors_fatal: true

    - name: Token Configuration
      when: k3s_project.cluster.token | length == 0
      no_log: true
      run_once: true
      block:
        - name: Wait for token creation
          ansible.builtin.wait_for:
            path: '{{ k3s_map.node.directory.data }}/server/node-token'

        - name: Read token
          ansible.builtin.slurp:
            path: '{{ k3s_map.node.directory.data }}/server/node-token'
          register: node_token

        - name: Set project token
          ansible.utils.update_fact:
            updates:
              - path: k3s_project.cluster.token
                value: '{{ node_token.content | b64decode | trim }}'
          register: update

        - name: Update project fact
          ansible.builtin.set_fact:
            k3s_project: '{{ update.k3s_project }}'

    - name: Kubepug Configuration
      block:
        - name: Checksum Configuration
          run_once: true
          block:
            - name: Get remote checksum
              ansible.builtin.uri:
                url: '{{ k3s_project.release.kubepug.checksum }}'
                return_content: true
              register: checksum
              check_mode: false

            - name: Set sha256 checksum fact
              ansible.builtin.set_fact:
                sha256_checksum: "{{ item.split(' ')[0] }}"
              loop: "{{ checksum.content.split('\n') }}"
              when: item | regex_search(k3s_vars.release.kubepug.file + '$')

        - name: Download kubepug archive
          ansible.builtin.get_url:
            url: '{{ k3s_project.release.kubepug.file }}'
            checksum: sha256:{{ sha256_checksum }}
            dest: /tmp
            owner: root
            group: root
            mode: '644'
          register: result
          delay: 1
          retries: 3
          until: result is not failed
          check_mode: false

        - name: Install kubepug binary
          ansible.builtin.unarchive:
            src: /tmp/{{ k3s_vars.release.kubepug.file }}
            dest: '{{ k3s_map.node.directory.bin }}'
            owner: root
            group: root
            mode: '755'
            remote_src: true

        - name: Remove kubepug archive
          ansible.builtin.file:
            path: /tmp/{{ k3s_vars.release.kubepug.file }}
            state: absent
          check_mode: false

- name: Local Configuration
  when:
    - k3s_vars.cluster.kubeconfig.local is truthy
    - inventory_hostname in ['localhost', k3s_map.server.default_host]
  no_log: true
  run_once: true
  block:
    - name: Create temporary file
      ansible.builtin.tempfile:
        prefix: kubeconfig.
      register: kubeconfig

    - name: Copy kubeconfig file
      ansible.builtin.copy:
        src: '{{ k3s_project.cluster.kubeconfig }}'
        dest: '{{ kubeconfig.path }}'
        mode: preserve
        remote_src: true

    - name: Get file content
      ansible.builtin.slurp:
        path: '{{ kubeconfig.path }}'
      register: file

    - name: Set datasource fact
      ansible.builtin.set_fact:
        datasource: '{{ file.content | b64decode | from_yaml }}'

    - name: Set datasource parameters
      ansible.builtin.set_fact:
        datasource: '{{ datasource | combine(parameters) }}'
      vars:
        parameters:
          clusters:
            - cluster:
                certificate-authority-data: "{{ datasource.clusters[0].cluster['certificate-authority-data'] }}"
                server: https://{{ k3s_vars.server.api.host if k3s_map.server.ha else k3s_node.ip }}:{{ k3s_vars.server.api.port }}
              name: '{{ datasource.clusters[0].name }}'

    - name: Create local .kube directory
      ansible.builtin.file:
        path: '{{ k3s_vars.cluster.kubeconfig.path }}'
        mode: '755'
        state: directory
      delegate_to: localhost
      become: false

    - name: Update remote .kube/config file
      ansible.builtin.copy:
        content: '{{ datasource | to_nice_yaml(indent=2) }}'
        dest: '{{ kubeconfig.path }}'
        mode: preserve
        remote_src: true

    - name: Copy remote .kube/config file locally
      ansible.builtin.fetch:
        src: '{{ kubeconfig.path }}'
        dest: "{{ k3s_vars.cluster.kubeconfig.path + '/config' }}"
        flat: true

    - name: Remove remote .kube/config file
      ansible.builtin.file:
        path: '{{ kubeconfig.path }}'
        state: absent

    - name: Set local .kube/config file permissions
      ansible.builtin.file:
        path: "{{ k3s_vars.cluster.kubeconfig.path + '/config' }}"
        mode: '600'
        state: file
      delegate_to: localhost
      become: false
