---
- name: Hardware Configuration
  notify: Reboot
  block:
    - name: Raspberry Pi Configuration
      when: cluster_vars.hardware.product | lower == 'raspberry pi'
      block:
        - name: Set service facts
          ansible.builtin.service_facts:

        - name: Bluetooth Configuration
          when: cluster_vars.service.bluetooth.enabled is falsy
          block:
            - name: Disable bluetooth service
              ansible.builtin.systemd_service:
                name: bluetooth.service
                state: stopped
                enabled: false
              when: ansible_facts.services['bluetooth.service'] is defined

            - name: Disable hciuart service
              ansible.builtin.systemd_service:
                name: hciuart.service
                state: stopped
                enabled: false
              when: ansible_facts.services['hciuart.service'] is defined

        - name: WiFi Configuration
          when: cluster_vars.service.wifi.enabled is falsy
          block:
            - name: Disable wifi service
              ansible.builtin.systemd_service:
                name: wpa_supplicant.service
                state: stopped
                enabled: false
              when: ansible_facts.services['wpa_supplicant.service'] is defined

        - name: Create firmware purge configuration
          ansible.builtin.copy:
            content: |
              DPkg::Post-Invoke {"/usr/bin/find /boot/firmware -type f -name '*.bak' -delete 2>/dev/null || true";};
            dest: /etc/apt/apt.conf.d/90rpi-firmware-purge
            owner: root
            group: root
            mode: '644'

    - name: USB Device Configuration
      when: cluster_vars.device.enabled is truthy
      block:
        - name: Set device id
          ansible.builtin.command:
            cmd: lsusb -s {{ cluster_vars.device.id }}
          changed_when: false
          register: cluster_device_id

        - name: Device Trim
          when: cluster_device_id.stdout.find(cluster_vars.device.name) != -1
          block:
            - name: Set device attributes fact
              ansible.builtin.set_fact:
                cluster_device_attributes: "{{ cluster_device | join | trim | split(':') }}"
              vars:
                cluster_device: "{{ cluster_device_id.stdout | regex_search('ID\\s+([\\w:]+)\\s+' + cluster_vars.device.name, '\\1') }}"

            - name: Device Rule Setup
              when:
                - cluster_device_attributes is iterable
                - cluster_device_attributes | length == 2
              block:
                - name: Set device rule fact
                  ansible.builtin.set_fact:
                    cluster_device_rule:
                      - ACTION=="add|change"
                      - ATTRS{idVendor}=="{{ cluster_device_attributes[0] }}"
                      - ATTRS{idProduct}=="{{ cluster_device_attributes[1] }}"
                      - SUBSYSTEM=="scsi_disk"
                      - ATTR{provisioning_mode}="unmap"

                - name: Create device rule
                  ansible.builtin.lineinfile:
                    path: /etc/udev/rules.d/10-unmap.fstrim.rules
                    line: "{{ cluster_device_rule | join(', ') }}"
                    regexp: ^ACTION
                    owner: root
                    group: root
                    mode: '644'
                    create: true

    - name: Mounted Filesystem
      block:
        - name: Start service
          ansible.builtin.systemd_service:
            name: fstrim.timer
            state: started
            daemon_reload: true
            enabled: true

        - name: Discard unused blocks on mounted filesystem
          ansible.builtin.command:
            cmd: fstrim -vA
          changed_when: cluster_command.stdout.find('trimmed') != -1
          register: cluster_command

- name: OS Configuration
  block:
    - name: Get host fqdn
      ansible.builtin.command:
        cmd: hostname --fqdn
      changed_when: false
      register: cluster_host_fqdn

    - name: Get host all fqdns
      ansible.builtin.command:
        cmd: hostname --all-fqdns
      changed_when: false
      register: cluster_host_all_fqdns

    - name: Set cluster host fact
      ansible.builtin.set_fact:
        cluster_host:
          extension: "{{ cluster_host_all_fqdns.stdout | split | first | split('.') | last | default('local') }}"
          fqdn: '{{ cluster_host_all_fqdns.stdout | split | first }}'
          ipv4: "{{ ansible_default_ipv4['address'] }}"
          name: '{{ ansible_host }}'

    - name: Set host fqdn
      ansible.builtin.replace:
        path: /etc/hosts
        regexp: ^127.0.1.1\s.+\s{{ cluster_host['name'] }}$
        replace: 127.0.1.1 {{ cluster_host['fqdn'] }} {{ cluster_host['name'] }}
      notify: Reboot
      when: cluster_host_fqdn.stdout != cluster_host['fqdn']

    - name: Set root full name
      ansible.builtin.command:
        cmd: chfn -f "{{ cluster_host['name'] }}" root
      changed_when: false

    - name: Disable access time updates
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: defaults\t0
        replace: defaults,noatime\t0
      notify: Reboot

    - name: Disable cloud-init service
      ansible.builtin.file:
        path: /etc/cloud/cloud-init.disabled
        access_time: preserve
        modification_time: preserve
        state: touch
        owner: root
        group: root
        mode: '644'
      notify: Reboot
      when: cluster_vars.service.cloud_init.enabled is falsy

    - name: Disable firewall service
      ansible.builtin.systemd_service:
        name: ufw.service
        state: stopped
        enabled: false

    - name: Disable snapd services
      ansible.builtin.systemd_service:
        name: '{{ item }}'
        state: stopped
        enabled: false
      loop:
        - snapd.apparmor.service
        - snapd.service
        - snapd.seeded.service
        - snapd.socket
      when: cluster_vars.service.snapd.enabled is falsy

    - name: Install cifs utilities package
      ansible.builtin.apt:
        name: cifs-utils
        autoremove: true
        update_cache: true

    - name: Load kernel modules
      ansible.builtin.copy:
        content: |
          br_netfilter
          overlay
        dest: /etc/modules-load.d/kubernetes.conf
        owner: root
        group: root
        mode: '644'
      notify: Reboot

    - name: Unattended Upgrades
      notify: Restart unattended upgrades service
      when: cluster_vars.service.unattended_upgrades.enabled is truthy
      block:
        - name: Install history notification package
          ansible.builtin.apt:
            name: apt-listchanges
            autoremove: true
            update_cache: true

        - name: Update unattended upgrades configuration
          ansible.builtin.replace:
            path: /etc/apt/apt.conf.d/50unattended-upgrades
            regexp: '{{ item.regexp }}'
            replace: '{{ item.replace }}'
          loop:
            - regexp: ^(?:.*)(\"\${distro_id}:\${distro_codename}-updates\";)$
              replace: \t\g<1>
            - regexp: ^(?:.*)(Unattended-Upgrade::Mail)\s.*;$
              replace: '\g<1> "{{ global_map.credentials.cluster.postfix.user.alias }}";'
            - regexp: ^(?:.*)(Unattended-Upgrade::MailReport)\s.*;$
              replace: '\g<1> "{{ cluster_vars.service.unattended_upgrades.mail_report }}";'
            - regexp: ^(?:.*)(Unattended-Upgrade::Remove-Unused-Dependencies)\s.*;$
              replace: '\g<1> "{{ cluster_vars.service.unattended_upgrades.remove_deps }}";'

- name: Mail Configuration
  notify: Reload postfix service
  when: cluster_vars.service.postfix.enabled is truthy
  block:
    - name: Set mail configuration
      ansible.builtin.debconf:
        name: postfix
        question: postfix/{{ item.question }}
        value: '{{ item.value }}'
        vtype: '{{ item.vtype }}'
      when: item.enabled is truthy
      loop:
        # General mail configuration type
        - question: main_mailer_type
          value: 'Satellite system'
          vtype: select
          enabled: true
        # System mail name
        - question: mailname
          value: "{{ cluster_host['fqdn'] }}"
          vtype: string
          enabled: true
        # SMTP relay host
        - question: relayhost
          value: '[{{ cluster_vars.service.postfix.relay.host }}]:{{ cluster_vars.service.postfix.relay.port }}'
          vtype: string
          enabled: true
        # Recipient for root and postmaster mail
        - question: root_address
          value: "root@{{ cluster_host['fqdn'] }}"
          vtype: string
          enabled: true
        # Other destinations to accept mail for (blank for none)
        # Disabled, host name wrongly set as fqdn by postfix
        - question: destinations
          value: "$myhostname, {{ cluster_host['name'] }}, localhost.{{ cluster_host['extension'] }}, localhost"
          vtype: string
          enabled: false
        # Force synchronous updates on mail queue
        - question: chattr
          value: 'true'
          vtype: boolean
          enabled: true
        # Local networks
        - question: mynetworks
          value: "127.0.0.1/32, 127.0.1.1/32, {{ cluster_host['ipv4'] }}/32"
          vtype: string
          enabled: true
        # Local address extension character
        # Disabled, using default value, kept as reference
        - question: recipient_delim
          value: '+'
          vtype: string
          enabled: false
        # Mailbox size limit (bytes)
        - question: mailbox_limit
          value: '51200000'
          vtype: string
          enabled: true
        # Internet protocols to use
        - question: protocols
          value: '{{ cluster_vars.service.postfix.protocols }}'
          vtype: select
          enabled: true

    - name: Install mail package
      ansible.builtin.apt:
        name: bsd-mailx
        autoremove: true
        update_cache: true
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Create generic map
      ansible.builtin.copy:
        content: "root@{{ cluster_host['fqdn'] }} {{ global_map.credentials.cluster.postfix.user.alias }}\n"
        dest: /etc/postfix/generic
        owner: root
        group: root
        mode: '600'

    - name: Set sasl password fact
      ansible.builtin.set_fact:
        cluster_sasl_password:
          - '[{{ cluster_vars.service.postfix.relay.host }}]'
          - '{{ cluster_vars.service.postfix.relay.port }} {{ global_map.credentials.cluster.postfix.user.name }}'
          - '{{ global_map.credentials.cluster.postfix.user.password }}'

    - name: Create sasl password map
      ansible.builtin.copy:
        content: "{{ cluster_sasl_password | join(':') }}\n"
        dest: /etc/postfix/sasl/password
        owner: root
        group: root
        mode: '600'

    - name: Initialize map database
      ansible.builtin.command:
        cmd: postmap {{ item }}
      changed_when: false
      loop:
        - /etc/postfix/generic
        - /etc/postfix/sasl/password

    - name: Set map file permissions
      ansible.builtin.file:
        path: '{{ item }}'
        owner: root
        group: root
        mode: '600'
      loop:
        - /etc/postfix/generic.db
        - /etc/postfix/sasl/password.db

    - name: Update mail configuration
      ansible.builtin.command:
        cmd: postconf -e '{{ item.name }} = {{ item.value }}'
      changed_when: false
      loop:
        - name: mydestination
          value: $myhostname, {{ cluster_host['name'] }}, localhost.{{ cluster_host['extension'] }}, localhost
        - name: smtp_generic_maps
          value: hash:/etc/postfix/generic
        - name: smtp_sasl_auth_enable
          value: 'yes'
        - name: smtp_sasl_password_maps
          value: hash:/etc/postfix/sasl/password
        - name: smtp_sasl_security_options
          value: noanonymous
        - name: smtp_tls_CAfile
          value: /etc/ssl/certs/ca-certificates.crt
        - name: smtp_tls_security_level
          value: encrypt
