---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cloudflare
    - k3s

- name: Set hostname fact
  ansible.builtin.set_fact:
    hostname: '{{ k3s_vars.kubernetes.gateway.subdomain }}.{{ cloudflare_vars.kubernetes.gateway.domain }}'
  when:
    - k3s_ha_cluster
    - ansible_host in k3s_server_hosts
    - cloudflare_vars.kubernetes.gateway.domain != 'disabled'

- name: Server API Post-Install
  when:
    - k3s_ha_cluster
    - not k3s_postinstall
    - ansible_host in k3s_server_hosts
    - cloudflare_vars.kubernetes.gateway.domain != 'disabled'
  block:
    - name: Server API Setup
      run_once: true
      block:
        - name: Create api service
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'api_service.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create api endpoint slice
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'api_endpoint_slice.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create api gateway
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'api_gateway.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create api http route
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'api_http_route.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create api https route
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'api_https_route.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

    - name: Kube Configuration Setup
      when: cloudflare_vars.kubernetes.acme.server != 'staging'
      block:
        - name: Get user info
          ansible.builtin.user:
            name: '{{ ansible_user }}'
          register: user_info

        - name: Set kube configuration host
          ansible.builtin.command:
            cmd: kubectl config set-cluster default
                  --kubeconfig={{ user_info.home }}/.kube/config
                  --server=https://{{ hostname }}
          changed_when: result.rc == 0
          register: result

        - name: Copy kube configuration file locally
          ansible.builtin.fetch:
            src: '{{ user_info.home }}/.kube/config'
            dest: "{{ k3s_vars.directory.kubeconfig }}"
            flat: true
          when: k3s_vars.server.kubeconfig.local
          run_once: true

- name: Server Configuration Post-Install
  notify: Restart service
  when:
    - k3s_ha_cluster
    - k3s_postinstall
    - ansible_host in k3s_server_hosts
  block:
    - name: Set server configuration postinstall fact
      ansible.builtin.set_fact:
        k3s_config_postinstall: true

    - name: Update server configuration file
      ansible.builtin.template:
        src: config.j2
        dest: '{{ k3s_vars.directory.config }}/config.yaml'
        owner: root
        group: root
        mode: '0600'

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
