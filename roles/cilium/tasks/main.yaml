---
- name: Import facts
  ansible.builtin.import_role:
    name: k3s
    tasks_from: facts

- name: Role Validation
  ansible.builtin.import_tasks:
    file: validation.yaml

- name: Role Provisioning
  when: ansible_host in k3s_server_hosts
  block:
    - name: Validate service state
      ansible.builtin.wait_for:
        port: '{{ k3s_vars.server.api.port }}'
        state: drained
        timeout: 30
      any_errors_fatal: true

    - name: Set release fact
      ansible.builtin.set_fact:
        release:
          - file: '{{ cilium_vars.release.cli.file }}'
            url: '{{ cilium_cli_release_url_file }}'
          - file: '{{ cilium_vars.release.hubble.file }}'
            url: '{{ cilium_hubble_release_url_file }}'
      run_once: true

    - name: Download archive
      ansible.builtin.get_url:
        url: '{{ item.url }}'
        checksum: sha256:{{ item.url }}.sha256sum
        dest: /tmp
        owner: root
        group: root
        mode: '0644'
      loop: '{{ release }}'
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Install binary
      ansible.builtin.unarchive:
        src: /tmp/{{ item.file }}
        dest: '{{ k3s_vars.directory.bin }}'
        owner: root
        group: root
        mode: '0755'
        remote_src: true
      loop: '{{ release }}'

    - name: Delete archive
      ansible.builtin.file:
        path: /tmp/{{ item.file }}
        state: absent
      loop: '{{ release }}'

    - name: Add repository
      kubernetes.core.helm_repository:
        name: '{{ cilium_vars.kubernetes.helm.repository.org }}'
        repo_url: '{{ cilium_vars.kubernetes.helm.repository.url }}'

    - name: Chart Setup
      run_once: true
      block:
        - name: Apply gateway api crds manifest
          kubernetes.core.k8s:
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            src: '{{ cilium_gateway_api_release_url_file }}'

        - name: Set chart setup fact
          ansible.builtin.set_fact:
            cilium_setup: true

        - name: Set chart postinstall fact
          ansible.builtin.set_fact:
            cilium_postinstall: false

        - name: Install chart
          kubernetes.core.helm:
            chart_ref: '{{ cilium_project_chart }}'
            chart_version: '{{ cilium_vars.kubernetes.helm.chart.version }}'
            create_namespace: true
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            name: '{{ cilium_vars.kubernetes.helm.chart.name }}'
            namespace: '{{ cilium_vars.kubernetes.namespace }}'
            update_repo_cache: true
            values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
            wait: true
          register: result
          delay: 1
          retries: 3
          until: result is not failed

        - name: Create l2 announcement policy
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'l2_announcement_policy.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create loadbalancer ip pool
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'loadbalancer_ip_pool.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Set chart setup fact
          ansible.builtin.set_fact:
            cilium_setup: false

        - name: Update chart values
          kubernetes.core.helm:
            chart_ref: '{{ cilium_project_chart }}'
            chart_version: '{{ cilium_vars.kubernetes.helm.chart.version }}'
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            name: '{{ cilium_vars.kubernetes.helm.chart.name }}'
            namespace: '{{ cilium_vars.kubernetes.namespace }}'
            update_repo_cache: true
            reset_values: false
            reuse_values: true
            values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
            wait: true
          register: result
          delay: 1
          retries: 3
          until: result is not failed
