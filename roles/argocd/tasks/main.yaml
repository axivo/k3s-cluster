---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cloudflare
    - k3s

- name: Role Validation
  ansible.builtin.import_tasks:
    file: validation.yaml

- name: Role Provisioning
  when: ansible_host in k3s_server_hosts
  block:
    - name: Validate service state
      ansible.builtin.wait_for:
        port: '{{ k3s_vars.server.api.port }}'
        state: drained
        timeout: 30
      any_errors_fatal: true

    - name: Set checksums fact
      ansible.builtin.uri:
        url: '{{ argocd_release_url_checksums }}'
        return_content: true
      register: checksums
      run_once: true

    - name: Set sha256 checksum fact
      ansible.builtin.set_fact:
        sha256_checksum: "{{ item.split(' ')[0] }}"
      loop: "{{ checksums.content.split('\n') }}"
      when: argocd_vars.release.file in item
      run_once: true

    - name: Install binary
      ansible.builtin.get_url:
        url: '{{ argocd_release_url_file }}'
        checksum: sha256:{{ sha256_checksum }}
        dest: '{{ k3s_vars.directory.bin }}/argocd'
        owner: root
        group: root
        mode: '0755'
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Add repository
      kubernetes.core.helm_repository:
        name: '{{ argocd_vars.kubernetes.helm.repository.org }}'
        repo_url: '{{ argocd_vars.kubernetes.helm.repository.url }}/{{ argocd_vars.kubernetes.helm.repository.name }}'

    - name: Chart Setup
      run_once: true
      block:
        - name: Set hostname fact
          ansible.builtin.set_fact:
            hostname: '{{ argocd_vars.kubernetes.server.gateway.subdomain }}.{{ cloudflare_vars.kubernetes.gateway.domain }}'
          when: cloudflare_vars.kubernetes.gateway.domain != 'disabled'

        - name: Set server user settings fact
          ansible.builtin.set_fact:
            server:
              admin:
                password: "{{ argocd_vars.kubernetes.server.admin.password | string | ansible.builtin.password_hash('blowfish') }}"
              user:
                name: '{{ argocd_vars.kubernetes.server.user.name }}'
                password: "{{ argocd_vars.kubernetes.server.user.password | string | ansible.builtin.password_hash('blowfish') }}"

        - name: Install chart
          kubernetes.core.helm:
            chart_ref: '{{ argocd_project_chart }}'
            chart_version: '{{ argocd_vars.kubernetes.helm.chart.version }}'
            create_namespace: true
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            name: '{{ argocd_vars.kubernetes.helm.chart.name }}'
            namespace: '{{ argocd_vars.kubernetes.namespace }}'
            update_repo_cache: true
            values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
            wait: true
          register: result
          delay: 1
          retries: 3
          until: result is not failed

        - name: Gateway Setup
          when: cloudflare_vars.kubernetes.gateway.domain != 'disabled'
          block:
            - name: Create server gateway
              kubernetes.core.k8s:
                definition: "{{ lookup('ansible.builtin.template', 'gateway.j2') | from_yaml }}"
                kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
                wait: true

            - name: Create http route
              kubernetes.core.k8s:
                definition: "{{ lookup('ansible.builtin.template', 'http_route.j2') | from_yaml }}"
                kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
                wait: true

            - name: Create https route
              kubernetes.core.k8s:
                definition: "{{ lookup('ansible.builtin.template', 'https_route.j2') | from_yaml }}"
                kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
                wait: true

        - name: Set server loadbalancer ip
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'loadbalancer.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true
          when: cloudflare_vars.kubernetes.gateway.domain == 'disabled'

        - name: Set server user name
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'username.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Set server user password
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'password.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Set server rbac policy
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'policy.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true
