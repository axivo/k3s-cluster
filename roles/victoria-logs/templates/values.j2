global:
  cluster:
    dnsDomain: {{ k3s_vars.cluster.domain }}
{% if victorialogs_postinstall is truthy %}
dashboards:
  enabled: true
{% endif %}
podDisruptionBudget:
  enabled: true
  maxUnavailable: 1
server:
{% if externaldns_vars.cloudflare.host.domain | lower != 'disabled' %}
  ingress:
    annotations:
{% for key, value in victorialogs_map.ingress.server.annotations.items() %}
      {{ key | indent(6) }}: {{ value }}
{% endfor %}
    enabled: {{ victorialogs_vars.kubernetes.server.ingress.enabled | lower }}
    hosts:
      - name: {{ victorialogs_map.ingress.server.hostname }}
        path:
          - /
        port: http
    ingressClassName: {{ victorialogs_map.ingress.class.name }}
    tls:
      - hosts:
          - {{ victorialogs_map.ingress.server.hostname }}
        secretName: {{ externaldns_vars.cloudflare.prefix }}-{{ victorialogs_map.ingress.server.name }}
{% endif %}
{% if victorialogs_vars.kubernetes.server.storage.enabled is truthy %}
  persistentVolume:
    accessModes:
      {{ victorialogs_vars.kubernetes.server.storage.access_modes | to_nice_yaml | indent(6) }}
    enabled: true
    size: {{ victorialogs_vars.kubernetes.server.storage.size }}
    storageClassName: {{ victorialogs_vars.kubernetes.server.storage.class }}
{% else %}
  emptyDir:
    sizeLimit: {{ victorialogs_vars.kubernetes.server.storage.size }}
{% endif %}
  replicaCount: {{ victorialogs_vars.kubernetes.server.replicas }}
  resources:
    limits:
{% if victorialogs_vars.kubernetes.server.resources.limits.cpu is truthy %}
      cpu: {{ victorialogs_vars.kubernetes.server.resources.limits.cpu }}
{% endif %}
      memory: {{ victorialogs_vars.kubernetes.server.resources.limits.memory }}
    requests:
      cpu: {{ victorialogs_vars.kubernetes.server.resources.requests.cpu }}
      memory: {{ victorialogs_vars.kubernetes.server.resources.requests.memory }}
{% if victorialogs_postinstall is truthy and victorialogs_map.metrics.service.monitor.enabled is truthy %}
  serviceMonitor:
    enabled: true
{% if victorialogs_map.metrics.service.monitor.scrape.interval is falsy %}
    interval: {{ victoriametrics_map.service.monitor.scrape.interval }}
{% else %}
    interval: {{ victorialogs_map.metrics.service.monitor.scrape.interval }}
{% endif %}
    namespace: {{ victoriametrics_vars.kubernetes.namespace }}
{% if victorialogs_map.metrics.service.monitor.scrape.timeout is falsy %}
    scrapeTimeout: {{ victoriametrics_map.service.monitor.scrape.timeout }}
{% else %}
    scrapeTimeout: {{ victorialogs_map.metrics.service.monitor.scrape.timeout }}
{% endif %}
{% endif %}
  retentionPeriod: {{ victorialogs_vars.kubernetes.server.retention_period }}
{% if victorialogs_vars.kubernetes.vector.enabled is truthy %}
vector:
  enabled: true
  logLevel: {{ victorialogs_vars.kubernetes.vector.log_level }}
{% if victorialogs_vars.kubernetes.vector.autoscaling.enabled is truthy %}
  autoscaling:
    enabled: true
    maxReplicas: {{ victorialogs_vars.kubernetes.vector.autoscaling.max_replicas }}
    minReplicas: {{ victorialogs_vars.kubernetes.vector.autoscaling.min_replicas }}
    targetCPUUtilizationPercentage: {{ victorialogs_vars.kubernetes.vector.autoscaling.target.utilization_percentage.cpu }}
    targetMemoryUtilizationPercentage: {{ victorialogs_vars.kubernetes.vector.autoscaling.target.utilization_percentage.memory }}
{% else %}
  replicas: {{ victorialogs_vars.kubernetes.vector.autoscaling.min_replicas }}
{% endif %}
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  resources:
    limits:
{% if victorialogs_vars.kubernetes.vector.resources.limits.cpu is truthy %}
      cpu: {{ victorialogs_vars.kubernetes.vector.resources.limits.cpu }}
{% endif %}
      memory: {{ victorialogs_vars.kubernetes.vector.resources.limits.memory }}
    requests:
      cpu: {{ victorialogs_vars.kubernetes.vector.resources.requests.cpu }}
      memory: {{ victorialogs_vars.kubernetes.vector.resources.requests.memory }}
{% endif %}
{% if k3s_vars.cluster.controlplane.tainted is truthy and k3s_project.cluster.tolerations | length > 0 %}
  tolerations:
    {{ k3s_project.cluster.tolerations | to_nice_yaml(indent=2) | trim | indent(4) }}
{% endif %}
  updateStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
